# #### quiz1
#
# Список вопросов к видео https://t.me/c/1937296927/765/29780 (АЛГОРИТМ ПРИНЯТИЯ И ОТДАЧИ ДОМАШКИ):
#
# (По желанию )В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1) Как понять, что домашка пришла?
# Ответ: в чате HomeWork должен появиться ник @Roslik и фразу: приму пул
#
# 2) Как принять домашку?
# Ответ: зайти в GitHub Decktop -> нажать кнопку Fetch origin -> посмотреть History
#
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
# Ответ: позволяет просмотреть историю изменений в репозитории.
#
# Функции, доступные при нажатии правой кнопки мыши на коммит:
# -Copy commit ID: Копирует идентификатор коммита в буфер обмена.
# -Copy commit message: Копирует сообщение коммита в буфер обмена.
# -Open commit in GitHub: Открывает коммит на GitHub в браузере.
# -Compare to previous commit: Сравнивает текущий коммит с предыдущим, показывая изменения.
# -Compare to working directory: Сравнивает коммит с текущим рабочим каталогом.
# -Create branch from commit: Создает новую ветку, начиная с выбранного коммита.
# -Reset to this commit: Переносит текущую ветку на выбранный коммит, отменяя все последующие изменения.
# -Revert commit: Создает новый коммит, который отменяет изменения, сделанные в выбранном коммите.
# -Cherry-pick commit: Применяет изменения из выбранного коммита в текущую ветку.
# -Delete branch: Удаляет ветку, если коммит является последним в ней.
#
# 3.1) Где брать ссылку на коммит? куда её отправлять?
# Ответ:  - правая кнопка - view in github
#         - копия ссылки выведенной страницы
#         - отправка в телегу (Homework - "коммит отдал и ссылка")
#
# 4) Что такое файл лога?
# Ответ: еженедельная отчетность по успеваемости
#
# 4.1) Когда нужно его пушить?
# Ответ: по факту выполненого дз
#
# 5) Что такое интерпритатор?
# Ответ: - программа для запуска и чтения код
#
# 6) Где можно выбрать интерпритатор?
# Ответ: запуск - Python Env-t - anaconda
#
# 7) Что такое модуль?
# Ответ: задание (задача)
#
# 8) Как создать и отправить коммит?
# Ответ: - после выполнения в GitHub есть отображение изменений
#        - присваеваем название коммиту
#        - нажимаем commit to main - push origin
#
# 9) Как посмотреть что коммит точно отправлен и находится в github?
# Ответ: - правая кнопка - view in github
#
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
# Ответ: pre-commit run --all-files  (если не прошло - вывод error)
#
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
# Ответ:
# - Pylint https://pylint.pycqa.org
# - Pydocstyle https://docs.astral.sh/ruff/rules/#pydocstyle-d
# - Flake8 https://flake8.pycqa.org/en/latest/index.html
# - Mypy https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html#variables
#
# 11) Как узнать какой именно линтер не прошёл проверку?
# Ответ: - в GitHub при выведении error прописан линтер, который Failed (также показывается файл, номер ячейки и ошибка)
#        - запуск терминал - ввод pre-commit run --all-files - красный(Failed) - указание линтера
#
# 12) Линтер Pylint видит markdown?
# Ответ: - нет (игнорирует)
#
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
# Ответ: - отличаются в нумерации для линтера и vscode
#        - линтер не считает markdown не считает за ячейку
#
# 14) Где посмотреть номер ячейки в vscode?
# Ответ: - внизу справа cell
#
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
# Ответ: интерпретируетация формата в гитхаб
#
# 16) Где посмотреть в какой ячейке ошибка?
# Ответ: в терминале после запуска команды pre-commit run --all-files
#
# 17) Как запустить терминал?
# Ответ: terminal -> new terminal
#
# 18) Что такое линтер?
# Ответ: анализатор кода
#
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
# Ответ: одноименный с ошибкой
#
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
# Ответ: pylint
#
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
# Ответ: да, должно
#
# 21) С какой  git команды начинается утро программиста?
# Ответ: git pull (по факту, это принять обновления)
#
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
# Ответ: - правой кнопкой на репозиторий - open in vs code
#
# 23) Что такое stash?
# Ответ: это функция в Git, которая позволяет временно сохранять незавершённые изменения, не фиксируя их в репозитории
#   Общее объяснение концепции: это временное хранилище изменений.
#
# 23.1) Как сохранить стэш?
# Ответ: git stash save "NAME_STASH" - сохранение изменения в рабочем каталоге с указанием имени
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#
#   Кнопка в vs code: Source Control -> Stashes -> Create Stash -> Enter
#
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
# Ответ: GitHub -> Stashed Changes - Restore
#
#   git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
#
# 23.3) Различие между стэшем и коммитом.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#   Ответ: стэш - локальные изменения Пользователя, коммит - внешние изменения (четко зафиксированные)
#
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
# Ответ: команда git stash list
#
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#
# Ответ:  git stash clear (для всех созданных)
#         git stash drop stash@{<n>} (для конкретных)
#
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#   Ответ: короткие сценарии, где нужно обратится к стэшу
#
# 24) Где посмотреть что есть конфликт в файлах?
# Ответ: fetch origin - pull origin - stash changes and continue
#
# 24.1) Когда он появляется?
# Ответ: при одновременных изменениях сделанными разными пользователями
#
# 25) Как решить конфликт в файлах?
# Ответ:- stash changes and continue
#       - в history нажать на последний коммит(сохраняю изменения другого и кидаю в буфер обмена свой)
#       - в changes восстанавливаем наши локальные изменения
#
# 26) Напишиие правильное утверждение
#
# Ответ: Зелёное то что пришло с гитхаба и синее локальные изменения или синее то что пришло с гитхаба и зелёное это локальные изменения
#
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
# Ответ: да
#
# 27.1) Что может произойти когда stash восстановите после принятия pull?
# Ответ: появиться знак "!" около файла -> конфликт
#
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
# Ответ: 4
#        - accept current changes(вне)
#        - accept incoming changes(наше)
#        - accept both changes(оба)
#        - самостоятельное редактирование
#
# 29) Что делает кнопка complete merge?
# Ответ: завершение слияния
#
# 30) В какой чат нужно писать если остались вопросы?
# Ответ: help me
#
# 31) Что такое FORK? Зачем его делают?
# Ответ: позволяет скопировать репозиторий к себе в локаль
#
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
# Ответ: GitHub -> - add - clone repository
#
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
# Ответ: 100%
#
# 34) Как создать файл в vs code?
# Ответ: (нажать) -> +
#
# 35) Файл лога нужно заполнять в конце каждого урока?
# Ответ: да
# ==================
#
# Дополнительные вопросы:
# 1) Какая команда конвертирует файл в py из ipynb?
# подсказка https://t.me/c/1937296927/1/26527
#
# Ответ: jupyter nbconvert --to script <имя_файла.ipynb>
#
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
# Ответ:
# - Пакетный менеджер — это инструмент, который автоматизирует процесс установки, обновления, настройки и удаления программного обеспечения.
# - и conda и pip
# - conda
#
# 3) Почему расширение py лучше чем ipynb?
# Ответ: Использование .ipynb, когда вам нужна интерактивная среда, прототипирования, обучения и документирования.
#
# 4) Что такое pep8?
# подсказка:https://peps.python.org/pep-0008/
# Ответ: это руководство по стилю кода для языка Python.
#
# 4.1) линтеры проверяют на соблюдение pep8?
# Ответ: да
#
# 4.2) Какая нотация используется для создания переменных?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Ответ: snake_case нотация.
#
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
# Ответ: да, может
#
# 4.4) Зачем и где мы используем андерскор _
# Ответ: - В интерактивном режиме (REPL)
#        - Игнорирование значения
#        - Указание на то, что переменная не должна использоваться
#
#
# 4.5) По PEP8 допустима переменная в одну букву?
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# Ответ: да
#

# #### quiz2
#
# Список вопросов к видео https://t.me/c/1937296927/765/29781 (НАСТРОЙКА VSCODE, перенос строк, линтеры, работа с ячейками):
#
# (По желанию)В ответе подробно всё опишите и обязательно нужно указывать тайм код из видео где я это сказал, по желанию, дополнительно прикладываем скриншот из видео.
# Если вы знаете ответы на вопросы из Вашего опыта, то таймкоды из видео не надо указывать и т.д.
#
# 1. Как включить автосохранение данных в VSCODE?
# Ответ: File -> Auto Save
#
# 2. Как настроить перенос строки?
# Ответ: View -> Word Wrap
#
# 3. Сколько символов по pep8 разрешено на строке?
# Ответ: 79
#
# 4. Какие способы переноса строк показаны в видео:
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# Ответ:
# This is a long string that we want to split across multiple lines.
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# Ответ:
#
# This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks.
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# Ответ:
# This is the first line.
# This is the second line.
# This is the third line.
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# Ответ:
# This is a very long string that I would like to continue on the next line.
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# Ответ: when 5 is multiplied by 6, the result is 30
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# Ответ:
# when 5 is multiplied by 6, the result is 30
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
# Ответ: в терминале
#
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
# Ответ:
# - сочетание клавиш Ctrl+Shift+G
# - отправка коммита: source control -> commit name -> выбираем commit & push
# - нужный репозиторий -> три точки -> pull
#
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
# Ответ:
# - Git — это распределённая система управления версиями
# - с помощью команд можно найти (и если нужно откатиться) к любому коммиту
#
# 8. Как вставить картинку в маркдаун?
# Ответ:
# - ![alt text](image.jpg) при условии, что картинка в одной директории с файлом
# - ![alt text](https://example.com/image.png) при размещении картинки в сети интернет
#
# 9. Где посмотреть длину строки в vs code?
# Ответ: правый нижний угол в VS Code
#
# 10. Как поменять тип ячейки с питона на маркдаун?
# Ответ: Открыть файл Jupyter Notebook (.ipynb) -> клик на ячейку -> панель ячейки изменить на Markdown
#
# 11. Как запустить сразу все ячейки в юпитере?
# Ответ: Cell -> Run All
#
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
# Ответ:
# - через использование HTML-тега <img> : <img src="" alt="альтернативный_текст" width="значение_ширины" height="значение_высоты">
#
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
# Ответ: Shift + Enter
#
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
# Ответ: View -> Show Line Numbers
#
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
# Ответ:
# - Go To  — функция, которая позволяет быстро перемещаться к определенной строке, символу, определению функции или другой метке в коде.
# - кликнуть на строку в traceback -> автоматически перейдет к соответствующей строке кода в ячейке.
#
#
# 16. Как очистить вывод ячеек которые уже запущены?
# Ответ: -> правый верхний угол (изображение корзины)
#
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
# Ответ:
# - открыть несколько вкладок и через Ctrl+Tab делать переключение
# - View -> Editor Layout -> Split Editor Right
#
# 18. Каким сочетанием убирается левый сайдбар?
# Ответ: Ctrl + B
#
# 19. Кнопка два листочка это наши локальные файлы?
# Ответ: да
#
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
# Ответ: трассировка это имя ошибки ( NameError). DICT
#
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и ttps://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
# Ответ:
# - Шпаргалка по Markdown
# - Markdown Cheatsheet
#
# 22. Что такое валидация?
# Ответ: Валидация — это процесс проверки данных на соответствие определенным правилам, ограничениям или требованиям.
#
# 23. Что такое трассировка ошибки?
# Ответ: Трассировка ошибки (Traceback) — это отчет, который генерирует интерпретатор или компилятор при возникновении ошибки во время выполнения программы.
#
# 24. Что значит отвалился интерпритатор?
# Ответ: неожиданно прекратил свою работу или вышел из строя во время выполнения программы.
#
#
# Отвечаете на вопросы в вашем редакторе кода.
#
#

#
